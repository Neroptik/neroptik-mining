;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
; NEROPTIK MINER 3.0
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TILE init noOverrides
InitEvents
GOSUB unmount

;=============================================================================
; MODE
;=============================================================================
SET %smeltonly #FALSE
SET %piochesonly #FALSE
SET %feedonly #FALSE
SET %interactive #FALSE

;=============================================================================
; DECLARATIONS TYPES
;=============================================================================
SET %oretypes DWJ_TVJ_GWJ_EWJ_BVI
SET %sandtypes KSG
SET %ingottypes ENK
SET %piochetypes QPF
SET %pelletypes TWF
SET %gemtypes UWS_VWS_GXS_AXS_ZWS_TWS
SET %tinkertooltype KTL

;=============================================================================
; DECLARATIONS CONSTANTES
;=============================================================================
SET %allcome #smc , #spc , All , #spc , come , #spc , $
SET %createpioches 40
SET %smallstack 4
SET %bigstack 20
SET %smallwait 8
SET %wait 12
SET %bigwait 28
SET %recallretries 3
SET %smeltretries 2
SET %emptyspotretries 5
SET %transfertretries 10
SET %feedretries 2
SET %maxweight 1400
SET %nbpioches 8
SET %nbfood 2
SET %agapite Agapite
SET %verite Verite
SET %valorite Valorite
SET %cooper Copper
SET %dullcooper Dull
SET %shadow Shadow
SET %bronze Bronze
SET %golden Golden
SET %sandmode #False

if %interactive = #TRUE
{
	DISPLAY yesno Voulez vous redefinir les elements ?
	if #dispRes = yes
	{
		;=============================================================================
		; SELECTION BEETLE
		;=============================================================================
		SET #LTARGETID N/A
		DISPLAY OK Selectionner la beetle $
		SET #TARGCURS 1
		WHILE #TARGCURS = 1
			WAIT 1
		SET *pet #LTARGETID

		;=============================================================================
		; SELECTION FORGE
		;=============================================================================
		SET #LTARGETID N/A
		DISPLAY OK Selectionner la forge $
		SET #TARGCURS 1
		WHILE #TARGCURS = 1
			WAIT 1
		SET *forge #LTARGETID

		;=============================================================================
		; SELECTION SAC DE STOCKAGE
		;=============================================================================
		SET #LTARGETID N/A
		DISPLAY OK Selectionner le sac de stockage $
		SET #TARGCURS 1
		WHILE #TARGCURS = 1
			WAIT 1
		SET *sacstockage #LTARGETID
				
		;=============================================================================
		; SELECTION SAC DE PIOCHES
		;=============================================================================
		SET #LTARGETID N/A
		DISPLAY OK Selectionner le sac de pioches $
		SET #TARGCURS 1
		WHILE #TARGCURS = 1
			WAIT 1
		SET *sacpioches #LTARGETID
				
		;=============================================================================
		; SELECTION SAC DE MINERAI
		;=============================================================================
		SET #LTARGETID N/A
		DISPLAY OK Selectionner le sac de minerai $
		SET #TARGCURS 1
		WHILE #TARGCURS = 1
			WAIT 1
		SET *sacminerai #LTARGETID
			
		;=============================================================================
		; SELECTION RUNEBOOK
		;=============================================================================
		SET #LTARGETID N/A
		DISPLAY OK Selectionner le runebook $
		SET #TARGCURS 1
		WHILE #TARGCURS = 1
			WAIT 1
		SET *runebook #LTARGETID

		;=============================================================================
		; SELECTION BACKPACK BEETLE
		;=============================================================================		
		DISPLAY OK Ouvrir le sac de la beetle (6s) $
		WAIT 6s
		SET *sacbeetle #CONTID
	}
}

EVENT Property *runebook
If SAND in #PROPERTY
   SET %sandmode #True

if *pet = N/A || *forge = N/A || *sacstockage = N/A || *sacpioches = N/A || *sacminerai = N/A || *runebook = N/A || *sacbeetle = N/A
{
	DISPLAY Les elements n'ont pas ete definis. $ Vous devez demarrer le script en mode interactif.
	halt
}

;=============================================================================
; CLICK_RELATIVE
; Clic sur un tile de type sol a une position relative au personnage
; param 1 : décalage X
; param 2 : décalage Y
;=============================================================================
sub click_relative
	TILE cnt #charPosX #charPosY #cursKind
	TILE Get #charPosX #charPosY #tileCnt #cursKind
	WAIT %smallwait
	SET #ltargettile #tileType
	SET #ltargetx #charposx + %1
	SET #ltargety #charposy + %2
	SET #ltargetz #charposz
	If %sandmode = #True
    SET %kind 2
  Else
    SET %kind 3
	SET #ltargetkind %kind
	WAIT %smallwait
	EVENT macro 22
return

;=============================================================================
; CHECK_BEETLE_FULL
; Vérifie si la beetle est pleine
; return : Vrai si pleine Faux sinon
;=============================================================================
sub check_beetle_full
	EVENT property *pet
	STR pos #property , , ,
	SET %start #strres + 26
	STR pos #property sto
	SET %end #strres - %start - 1
	STR mid #property %start %end
	SET %weight #strres
	if %weight > %maxweight
		SET %res #TRUE
    else
		SET %res #FALSE
return %res

;=============================================================================
; MOUNT
; Monte sur la beetle
;=============================================================================
sub mount
	MSG %allcome
	WAIT 2s
	SET #lobjectid *pet
	EVENT macro 17 0
	WAIT 1s
return

;=============================================================================
; UNMOUNT
; Descend de la beetle
;=============================================================================
sub unmount
	SET #lobjectid #CHARID
	EVENT macro 17 0
	WAIT 1s
return

;=============================================================================
; GUMP_WAIT
; Attend l'apparition d'un gump
; param 1 : Gump
; param 2 : Timeout
; param 3 : Mode
;=============================================================================
sub gump_wait
	if %0 > 0
		SET %gump %1
  if %0 > 1
  {
		SET %gtimeout #SCNT + %2
		SET %mode FAIL
  }
  SET %found #FALSE
  SET %gump_wait #TRUE
	WHILE %gump_wait <> #FALSE
	{
    If #MenuButton = Closed
       HALT
    If #MenuButton = button_reward
    {
        SET %REWARD_RUN #False
        MENU Set button_reward Rendre les BOD
        Set #MenuButton N/A
        BREAK
    }
		if #contname <> %gump
		{
       SET %found #FALSE
		}
		else
		{
		   SET %found #TRUE
		}
		if %found = #FALSE
		{
       If #scnt > %gtimeout && %mode = FAIL
		   {
		      SET %gump_wait #FALSE
		   }
		}
		else
		{
       SET %gump_wait #FALSE
    }
	}
return %found

;=============================================================================
; RECALL
; Téléporte aux différents spots
; param 1 : Numéro de la rune
;=============================================================================
sub recall
	SET %where %1
	SET %success #false
	for %attempt 1 %recallretries
	{
		SET %oldposx #charposx
		SET %oldposy #charposy
		if ! %success
		{
			SET #lobjectid *runebook
			EVENT macro 17 0
			GOSUB gump_wait generic_gump 5
			CONTPOS 0 0
			goto case_ , %where
case_1:
case_2:
			CLICK 140 200
goto endcase
case_3:
case_4:
			CLICK 175 200
goto endcase
case_5:
case_6:
			CLICK 210 200
goto endcase
case_7:
case_8:
			CLICK 245 200
goto endcase
case_9:
case_10:
			CLICK 310 200
goto endcase
case_11:
case_12:
			CLICK 345 200
goto endcase
case_13:
case_14:
			CLICK 380 200
goto endcase
case_15:
case_16:
			CLICK 415 200
endcase:
			WAIT %wait
			SET %cl %where + 1
			SET %cl %cl % 2
			SET %CLICKx ( 140 + ( %cl * 160 )  )
			SET %CLICKy 145
			CLICK %CLICKx %CLICKy
			WAIT %bigwait
			WAIT %bigwait
			WAIT %bigwait
		}
		if ! ( %oldposx = #charposx && %oldposy = #charposy )
		{
			SET %success #true
			SET %recallwait #true
		}
	}
return

;=============================================================================
; TRANSFERT
; Transfert items d'un sac à un autre
; param 1 : Type des objets à transférer
; param 2 : Sac de départ
; param 3 : Sac d'arrivée
; param 4 : Stack size
;=============================================================================
sub transfert
	SET %typeobj %1
	SET %from %2
	SET %to %3
	SET #lobjectid %from
	EVENT macro 17 1
	WAIT %wait
	if %0 = 4
		%size = %4
	else
		%size = 0
	SET %nb 0
	WHILE %nb < %transfertretries
	{
		FINDITEM %typeobj C_ , %from
		for #FINDINDEX 1 #FINDCNT
		{
			if #findkind <> -1
			{
				if %size > 0
					EXEVENT drag #findid %size
				else
					EXEVENT drag #findid #findstack
				WAIT %smallwait
				EXEVENT dropc %to
				WAIT %wait
				GOSUB check_beetle_full
				if #result = #TRUE
					break
			}
			else
				break
			WAIT %wait
		}
		WAIT %smallwait
		SET %nb %nb + 1
	}
return

;=============================================================================
; SMELT_ALL
; param 1 : Stack id
; Fond le minerai directment dans le sac source
; puis transfert les lingots dans le sac de stockage
;=============================================================================
sub smelt_all
	WAIT %smallwait
	SET %stackid %1
	EVENT sysMessage [INFO] Fond le minerai
	SET #lobjectid %stackid
	EVENT macro 17 0
	TARGET
	SET #ltargetid *forge
	SET #ltargetkind 1
	EVENT macro 22 0
return

;=============================================================================
; SMELT_STACK
; param 1 : Stack id
; Fond le minerai en déplacant des petits tas dans le backpack
; puis transfert les lingots dans le sac de stockage
;=============================================================================
sub smelt_stack
	SET %stackid %1
	SET %sz %2
	EVENT sysMessage [INFO] Transfert %sz minerais dans le backpack
	EXEVENT drag %stackid %sz
	WAIT %wait
	EXEVENT dropc #backpackid
	WAIT %wait
	SET #CONTID #backpackid
	FINDITEM %oretypes C_ , #backpackid
	for #FINDINDEX 1 #FINDCNT
		if #findkind <> -1
			GOSUB smelt_all #findid
return

;=============================================================================
; SMELT
; Fond le minerai en déplacant des petits tas dans le backpack
; puis le transfert dans le sac de stockage
;=============================================================================
sub smelt
	GOSUB unmount
	WAIT %wait
	ignoreitem reset
	EVENT sysMessage [INFO] Transfert du minerai dans le sac de minerai
	GOSUB transfert %oretypes #backpackid *sacminerai
	EVENT sysMessage [INFO] Transfert du minerai dans le sac de minerai
	GOSUB transfert %oretypes *sacbeetle *sacminerai
	EVENT sysMessage [INFO] Transfert des lingots dans le sac de stockage
	GOSUB transfert %ingottypes #backpackid *sacstockage
	EVENT sysMessage [INFO] Transfert des gems dans le sac de stockage
	GOSUB transfert %gemtypes #backpackid *sacstockage
	WAIT %wait
	SET #lobjectid *sacminerai
	EVENT macro 17 1
	WAIT %wait
	SET %nb 0
	WHILE %nb < %smeltretries
	{
		FINDITEM %oretypes C_ , *sacminerai
		for #FINDINDEX 1 #FINDCNT
		{
      set %jStart #jIndex
			GOSUB smelt_all #findid
			WAIT %smallwait
			set %jEnd #jIndex
			for %i %jStart %jEnd
      {
      	scanjournal %i
      	set %tofind metal-bearing
      	if %tofind in #journal
      	{
           ignoreItem #FINDID
      	}
      }
		}
		SET %nb %nb + 1
	}
	EVENT sysMessage [INFO] Transfert du minerai dans le sac de minerai
	GOSUB transfert %oretypes #backpackid *sacminerai
	EVENT sysMessage [INFO] Transfert des lingots dans le sac de stockage
	GOSUB transfert %ingottypes #backpackid *sacstockage
	EVENT sysMessage [INFO] Transfert des gems dans le sac de stockage
	GOSUB transfert %gemtypes #backpackid *sacstockage
	WAIT %smallwait
return

;=============================================================================
; CREATE_PIOCHES
; Creer de nouvelles pioches en fer
;=============================================================================
sub create_pioches
	WAIT %wait
	SET #lobjectid *sacpioches
	EVENT macro 17 1
	WAIT %wait
	FINDITEM %tinkertooltype C_ , *sacpioches
	if #findkind <> -1
	{
		EVENT sysMessage [INFO] Recuperation d'un tinker tool kit
		EXEVENT drag #FINDID 1
		WAIT %wait
		EXEVENT dropc #backpackid
		WAIT %wait
		SET #lobjectid *sacstockage
		EVENT macro 17 1
		WAIT %wait
		FINDITEM %ingottypes C_ , *sacstockage
		for #FINDINDEX 1 #FINDCNT
		{
			EVENT property #FINDID
			if %agapite in #property || %verite in #property || %valorite in #property || %cooper in #property || %dullcooper in #property || %shadow in #property || %bronze in #property || %golden in #property
			{
				CONTINUE
			}
			else
			{
				SET %nbp %createpioches * 4
				EVENT sysMessage [INFO] Recuperation d'un tas de %nbp fers
				EXEVENT drag #FINDID %nbp
				WAIT %wait
				EXEVENT dropc #backpackid
				WAIT %wait
				FINDITEM %tinkertooltype C_ , #backpackid
				if #findkind <> -1
				{
					SET #lobjectid #FINDID
					EVENT macro 17 1
					GOSUB gump_wait generic_gump 5
					SET %cx #CONTPOSX + 30
					SET %cy #CONTPOSY + 110
					CLICK %cx %cy l
					WAIT %wait
					GOSUB gump_wait generic_gump 5
					SET %cx #CONTPOSX + 385
					SET %cy #CONTPOSY + 290
					CLICK %cx %cy l
					WAIT %wait
					GOSUB gump_wait generic_gump 5
					SET %cx #CONTPOSX + 230
					SET %cy #CONTPOSY + 190
					CLICK %cx %cy l
					WAIT %wait
					GOSUB gump_wait generic_gump 5
					SET %nb 0
					WHILE %nb < %createpioches
					{
						SET %cx #CONTPOSX + 285
						SET %cy #CONTPOSY + 555
						CLICK %cx %cy l
						WAIT %smallwait
						GOSUB gump_wait generic_gump 5
						If #RESULT = #FALSE
               BREAK
						SET %nb %nb + 1
					}
					EVENT sysMessage [INFO] Transfert des lingots dans le sac de stockage
					GOSUB transfert %ingottypes #backpackid *sacstockage
					EVENT sysMessage [INFO] Transfert des tinker tool kit dans le sac de pioches
					GOSUB transfert %tinkertooltype #backpackid *sacpioches
					EVENT sysMessage [INFO] Transfert des pioches dans le sac de pioches
					GOSUB transfert %piochetypes #backpackid *sacpioches
					GOSUB get_pioches
					return
				}
			}
			WAIT %smallwait
		}
	}
return

;=============================================================================
; GET_PIOCHES
; Prends des pioches dans le sac de stockage
;=============================================================================
sub get_pioches
	WAIT %wait
	SET #lobjectid *sacpioches
	EVENT macro 17 1
	WAIT %smallwait
	SET %nb 0
	WHILE %nb < %nbpioches
	{
		FINDITEM %piochetypes C_ , *sacpioches
		if #findkind <> -1
		{
			EXEVENT drag #findid 1
			EXEVENT dropc #backpackid
			WAIT %wait
		}
		else
		{
        FINDITEM %pelletypes C_ , *sacpioches
    		if #findkind <> -1
    		{
    			EXEVENT drag #findid 1
    			EXEVENT dropc #backpackid
    			WAIT %wait
    		}
    		else
    		{
			      GOSUB create_pioches
        }
		}
		SET %nb %nb + 1
		WAIT %wait
  }
return

;=============================================================================
; FEEDBEETLE
;=============================================================================
sub feedbeetle
{
   SET %nb 0
   WHILE %nb < %nbfood
   {
      EVENT Macro 15 1
      SET %gtimeout #SCNT + 3
      WHILE #SCNT < %gtimeout
          WAIT %SMALLWAIT
      SET %nb %nb + 1
   }
   SET %nb 0
   WHILE %nb < %feedretries
   {
       FINDITEM * C_ , #BACKPACKID
       For #FINDINDEX 1 #FINDCNT
    	 {
          SET %itemid #FINDID
          EVENT property %itemid
          If Sausage in #PROPERTY || Bird in #PROPERTY || Ham in #PROPERTY || Ribs in #PROPERTY
          {
              EXEVENT drag #findid
        			EXEVENT dropc *pet
              WAIT %BIGWAIT
          }
          If Cheese in #PROPERTY || Apple in #PROPERTY || Muffins in #PROPERTY || Peach in #PROPERTY || Fish in #PROPERTY || Bunch in #PROPERTY
          {
              SET #lobjectid #FINDID
         		  EVENT macro 17 1
              WAIT %BIGWAIT
          }
          WAIT %SMALLWAIT
       }
       SET %nb %nb + 1
   }
   return
}

;=============================================================================
; PROGRAMME PRINCIPAL
;=============================================================================
If %sandmode = #True
   SET %emptyspotretries %emptyspotretries * 2

if %smeltonly = #TRUE
{
	GOSUB smelt
	halt
}

if %piochesonly = #TRUE
{
	GOSUB create_pioches
	halt
}

if %feedonly = #TRUE
{
	GOSUB feedbeetle
	halt
}

WHILE #TRUE
{
	SET %spot 2
start:
	WHILE %spot < 17
	{
		SET %prev_weight #weight
		SET %nb_failed 0
		EVENT sysMessage [INFO] Remonte sur la beetle
		GOSUB mount
		SET %snb %spot - 1
		EVENT sysMessage [INFO] Va au spot %snb
		GOSUB recall %spot
		WAIT %smallwait
		EVENT sysMessage [INFO] Descend de la beetle
		GOSUB unmount
		WAIT %wait
		WHILE #TRUE
		{

			EVENT sysMessage [INFO] Cherche pioche dans le backpack
			FINDITEM %piochetypes C_ , #backpackid
			if #findkind = -1
			{
			   FINDITEM %pelletypes C_ , #backpackid
         if #findkind = -1
			   {
            EVENT sysMessage [INFO] Plus de pioches
    				EVENT sysMessage [INFO] Transfert du minerai dans la beetle
    				GOSUB transfert %oretypes #backpackid *sacbeetle %stacksize
    				GOSUB mount
    				EVENT sysMessage [INFO] Retour a la maison
    				GOSUB recall 1
    				GOSUB get_pioches
    				goto start
			   }
      }
      EVENT sysMessage [INFO] Pioche trouvee
			if #weight = %prev_weight
				SET %nb_failed %nb_failed + 1
			else
				SET %nb_failed 0
			if %nb_failed > %emptyspotretries
			{
			   EVENT sysMessage [INFO] Spot %spot vide
			   SET %nb_failed 0
			   goto next
			}
			SET %prev_weight #weight
			WAIT %smallwait
			SET #lobjectid #findid
			EVENT macro 17 0
			EVENT sysMessage [INFO] Commence a miner

      GOSUB click_relative 0 0
      WAIT %smallwait
			If %sandmode = #True
         WAIT 10s
			WAIT %smallwait

			if #maxweight < #weight
			{
        EVENT sysMessage [INFO] Backpack plein, transfert dans la beetle
        If %sandmode = #True
            GOSUB transfert %sandtypes #backpackid *sacbeetle %stacksize
        Else
            GOSUB transfert %oretypes #backpackid *sacbeetle %stacksize
				GOSUB check_beetle_full
				if #result = #TRUE
				{
					EVENT sysMessage [INFO] Beetle pleine
					GOSUB mount
					EVENT sysMessage [INFO] Retour a la maison
					GOSUB recall 1
					If %sandmode = #True
             GOSUB transfert %sandtypes *sacbeetle *sacstockage
          Else
             GOSUB smelt
					GOSUB feedbeetle
					goto start
				}
      }
    }
next:
    EVENT sysMessage [INFO] Backpack plein, transfert dans la beetle
    If %sandmode = #True
      GOSUB transfert %sandtypes #backpackid *sacbeetle %stacksize
    Else
      GOSUB transfert %oretypes #backpackid *sacbeetle %stacksize
    GOSUB check_beetle_full
		if #result = #TRUE
		{
			EVENT sysMessage [INFO] Beetle pleine
			GOSUB mount
			EVENT sysMessage [INFO] Retour a la maison
			GOSUB recall 1
			GOSUB smelt
			goto start
		}
		SET %spot %spot + 1
	}
}
