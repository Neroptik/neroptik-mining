;=============================================================================
; DECLARATIONS CONSTANTES
;=============================================================================
SET %allcome #smc , #spc , All , #spc , come , #spc , $
SET %SMALLWAIT 8
SET %WAIT 12
SET %BIGWAIT 20
SET %BS_TOOLS TBG
SET %TL_TOOLS HAG
SET %BS_MATERIALS ENK
SET %TL_MATERIALS CUI
SET %TL_LEATHER JJG
SET %MATERIALS_QTY 400
SET %BODTYPES EYM
SET %PELLE TWF
SET %PIOCHE QPF
SET %TISSU BUI
SET %COW NG
SET %COW2 IG
SET %BULL YG
SET %BULL2 XG
SET %MOUTON PF
SET %CHEVAL MG
SET %CHEVAL2 OF
SET %CHEVAL3 SG
SET %POULE AG
SET %FINDBOD_RETRIES 4
SET %FILLBOD_RETRIES 2
SET %FILLEDBOD 0
SET %FAILEDBOD 0
SET %CUIR JJG
SET %LAINE OFF
SET %PLUME VLK
SET %recallretries 3
set %corpse YFM
set %leather_uncutted  EEG_GED_DEG
set %gold POF_OFF_VLK
set %leather_cutted JJG
set %scissors KAG_JAG
set %weapons CNF_BNF_TSF_WSF_GMH_HNF_TRD_URD_VRH
set %lootbagtypes ZJF_CKF_LKF
set %pathzeit 6
set %backpackdelay 0
set %mydelay 16
set %mylinesPerCycle 20

InitEvents

;=============================================================================
; DECLARATIONS GLOBALES
;=============================================================================
SET %CURRRENT_MODE N/A
SET %EXCEPT N/A
SET %CREATEITEM N/A
SET %FILLBOD N/A
SET %CURRENT_TOOL N/A
SET %CURRENT_MATERIALS N/A
SET %PREFIX N/A
SET %REWARD_RUN N/A
SET %RUNEBOOK N/A
SET %GETCUIR N/A
SET %GETLAINE N/A
SET %GETPLUME N/A
set %myweapon N/A
SET %SACBEETLE N/A
SET %pet N/A
SET %SECURE N/A

;=============================================================================
; DECLARATIONS MENU
;=============================================================================
MENU window title AutoBOD 3.0
MENU window size 540 245
MENU window color $EEEEEE
MENU Button button_new 10 50 150 25 Nouveau BOD
MENU Button button_make 10 85 150 25 Faire les BOD
MENU Button button_reward 10 120 150 25 Rendre les BOD
MENU Combo Create mode 10 15 150
MENU Combo Add mode Forgeo
MENU Combo Add mode Tailo (Tissu)
MENU Combo Add mode Tailo (Cuir)
MENU Combo Select mode 1
MENU Check create 10 155 150 20 #true Creer les items
MENU Check fill 10 175 150 20 #true Remplir les BOD
MENU Check except 10 195 150 20 #false Faire les BOD except
MENU Text tmode 330 15 Mode : N/A
MENU Text tbodcode 330 30 BOD : N/A
MENU Text tbodamount 330 45 Total : N/A
MENU Text tbodcurrent 330 60 Nb : 0
MENU Text tdone 330 85 BOD remplis : 0
MENU Text tfailed 330 100 BOD inconnus : 0
MENU Font Align center
MENU Button button_loot 170 15 150 25 Ressources
MENU Check getcuir 170 50 150 20 #true Cuir
MENU Check getlaine 170 70 150 20 #true Laine
MENU Check getplume 170 90 150 20 #true Plumes
menu Font Color $00009C
menu Font Style b
MENU Text tlog 10 225 #SPC
MENU show

;=============================================================================
; RECALL
; T√©l√©porte aux diff√©rents spots
; param 1 : Num√©ro de la rune
;=============================================================================
sub recall
	SET %where %1
	SET %success #false
	for %attempt 1 %recallretries
	{
		SET %oldposx #charposx
		SET %oldposy #charposy
		if ! %success
		{
			SET #lobjectid %RUNEBOOK
			EVENT macro 17 0
			GOSUB gump_wait generic_gump 5
			CONTPOS 0 0
			goto case_ , %where
case_1:
case_2:
			CLICK 140 200
goto endcase
case_3:
case_4:
			CLICK 175 200
goto endcase
case_5:
case_6:
			CLICK 210 200
goto endcase
case_7:
case_8:
			CLICK 245 200
goto endcase
case_9:
case_10:
			CLICK 310 200
goto endcase
case_11:
case_12:
			CLICK 345 200
goto endcase
case_13:
case_14:
			CLICK 380 200
goto endcase
case_15:
case_16:
			CLICK 415 200
endcase:
			WAIT %wait
			SET %cl %where + 1
			SET %cl %cl % 2
			SET %CLICKx ( 140 + ( %cl * 160 )  )
			SET %CLICKy 145
			CLICK %CLICKx %CLICKy
			WAIT %bigwait
			WAIT %bigwait
			WAIT %bigwait
		}
		if ! ( %oldposx = #charposx && %oldposy = #charposy )
		{
			SET %success #true
			SET %recallwait #true
		}
	}
return

;=============================================================================
; REPLACE
; Remplace une string par une autre dans une string donnÈe
; Param 1 : haystack
; Param 2 : from
; Param 3 : to
;=============================================================================
SUB replace
  SET %lpc #LPC
  linesPerCycle 500
  SET %st 1
  SET %str %1
  STR LEN %2
  SET %findlen #STRRES
  STR LEN %3
  SET %replen #STRRES
  STR LEN %str
  SET %len #STRRES
clean:
  FOR %i %st %len
  {
    STR MID %str %i %findlen
    SET %find #STRRES
    IF %find = %2
    {
      STR DEL %str %i %findlen
      SET %str #STRRES
      IF %3 <> _BLANK_
      {
        STR INS %str %3 %i
        SET %str #STRRES
        SET %st %st + %findlen
        STR LEN %str
        SET %len #STRRES
        GOTO clean
      }
      else
      {
        STR LEN %str
        SET %len #STRRES
        SET %st %i
        GOTO clean
      }
    }
    else
    {
      SET %st %st + 1
    }
  }
linesPerCycle %lpc
RETURN %str

;=============================================================================
; GUMP_WAIT
; Attend l'apparition d'un gump
; param 1 : Gump
; param 2 : Timeout
; param 3 : Mode
;=============================================================================
sub gump_wait
	if %0 > 0
		SET %gump %1
  if %0 > 1
  {
		SET %gtimeout #SCNT + %2
		SET %mode FAIL
  }
  SET %found #FALSE
  SET %gump_wait #TRUE
	WHILE %gump_wait <> #FALSE
	{
    If #MenuButton = Closed
       HALT
    If #MenuButton = button_reward
    {
        SET %REWARD_RUN #False
        MENU Set button_reward Rendre les BOD
        Set #MenuButton N/A
        BREAK
    }
		if #contname <> %gump
		{
       SET %found #FALSE
		}
		else
		{
		   SET %found #TRUE
		}
		if %found = #FALSE
		{
       If #scnt > %gtimeout && %mode = FAIL
		   {
		      SET %gump_wait #FALSE
		   }
		}
		else
		{
       SET %gump_wait #FALSE
    }
	}
return %found

;=============================================================================
; TRANSFERT
; Transfert items d'un sac √† un autre
; param 1 : Type des objets √† transf√©rer
; param 2 : Sac de d√©part
; param 3 : Sac d'arriv√©e
; param 4 : Stack size
;=============================================================================
sub transfert
	SET %typeobj %1
	SET %from %2
	SET %to %3
	SET #lobjectid %from
	EVENT macro 17 1
	WAIT %wait
	if %0 = 4
		%size = %4
	else
		%size = 0
	SET %nb 0
	FINDITEM %typeobj C_ , %from
	for #FINDINDEX 1 #FINDCNT
	{
    If #MenuButton = Closed
       HALT
		if #findkind <> -1
		{
			if %size > 0
				EXEVENT drag #findid %size
			else
				EXEVENT drag #findid #findstack
			WAIT %smallwait
			EXEVENT dropc %to
			WAIT %wait
			if #result = #TRUE
				break
		}
		else
			break
		WAIT %wait
	}
	WAIT %smallwait
return

;=============================================================================
; GETBODTYPE
; Creer un code pour le BOD
;=============================================================================
sub getBODType
  SET !line %1
  if Exceptional in !line
     SET %numline 6
  else
     SET %numline 5
  STR pos !line $ %numline
  SET %spos #STRRES
  STR del !line 1 %spos
  SET !line #STRRES
  STR pos !line : 1
  SET %epos #STRRES - 1
  STR mid !line 1 %epos
  GOSUB replace #STRRES #SPC _
  GOSUB replace #RESULT ' _
  GOSUB replace #RESULT - _
return #RESULT

;=============================================================================
; GETBODAMOUNT
; Creer un code pour le BOD
;=============================================================================
sub getBODAmount
  SET !line %1
  if Exceptional in !line
     SET %numline 6
  else
     SET %numline 5
  STR pos !line $ %numline
  SET %spos #STRRES - 2
  SET %epos 2
  STR mid !line %spos %epos
return #STRRES

;=============================================================================
; GETNEXTPOS
; Donne le prochian couple _X_Y dans le gump
;=============================================================================
sub getNextPos
   SET %res X
   SET %seq %1
   STR Pos %seq _ 3
   if #STRRES > 0
   {
      SET %len #STRRES - 1
      STR del %seq 1 %len
      SET %res #STRRES
   }
return #STRRES

;=============================================================================
; GETX
; Donne la position X
;=============================================================================
sub getX
   SET %seq %1
   STR Pos %seq _ 2
   SET %start 2
   SET %end #STRRES - %start
   STR Mid %seq %start %end
return #STRRES

;=============================================================================
; GETY
; Donne la position Y
;=============================================================================
sub getY
   SET %seq %1
   STR Pos %seq _ 2
   SET %start #STRRES + 1
   STR Pos %seq _ 3
   if #STRRES = 0
   {
       SET %pos %start - 1
       STR Del %seq 1 %pos
   }
   else
   {
       SET %end #STRRES - %start
       STR Mid %seq %start %end
   }
return #STRRES

;=============================================================================
; CHECKMATERIALS
; Verifie la quantitÈ de materieux restants
;=============================================================================
sub checkMaterials
   FINDITEM %CURRENT_MATERIALS C_ , #BACKPACKID
   if #findkind = -1 || #FINDSTACK < 100
	 {
	    GOSUB transfert %CURRENT_MATERIALS #BACKPACKID %BODFROM
      FINDITEM %CURRENT_MATERIALS C_ , %BODFROM
      if #findkind <> -1
  		{
    	    EXEVENT Drag #FINDID %MATERIALS_QTY
    		  WAIT %SMALLWAIT
    		  EXEVENT Dropc #BACKPACKID
          WAIT %SMALLWAIT
      }
	 }
return

;=============================================================================
; CREATEITEMS
; Creer un code pour le BOD
;=============================================================================
sub createItems
   if %CREATEITEM = -1
   {
      SET %props %2
      if 10 in %props
         SET %count 10
      if 15 in %props
         SET %count 15
      if 20 in %props
         SET %count 20
      MENU Set tbodamount Total : %count
      MENU Set tlog Creating %count items
      SET %total %count
      MENU Set tlog Creation des items
      WHILE %count <> 0
      {

         If #MenuButton = Closed
            HALT
         SET %seq %1
         GOSUB checkMaterials
         GOSUB gump_wait generic_gump 2
         If #RESULT = #FALSE
         {
             MENU Set tlog Cherche outils dans le backpack
             FINDITEM %CURRENT_TOOL C_ , #BACKPACKID
             if #FINDKIND <> -1
             {
                 SET #lobjectid #findid
  		           EVENT macro 17 0
        		     GOSUB gump_wait generic_gump
             }
             else
             {
                 MENU Set tlog ERROR : Plus d'outils
                 HALT
             }
         }
         GOSUB gump_wait generic_gump 2
         If #RESULT = #TRUE
         {
            SET %cposx #CONTPOSX
            SET %cposy #CONTPOSY
            STR Len %seq
            WHILE #STRRES > 1
            {
               If #MenuButton = Closed
                  HALT
               GOSUB getX %seq
               SET %posx #RESULT + %cposx
               GOSUB getY %seq
               SET %posy #RESULT + %cposy
            	 CLICK %posx %posy l
      	       GOSUB gump_wait generic_gump 8
             	 GOSUB getNextPos %seq
           		 SET %seq #RESULT
               STR Len %seq
               WAIT %SMALLWAIT
            }

            SET %count %count - 1
            SET %done %total - %count
            MENU Set tlog Creation des items ( , %done , #SPC , / , #SPC , %total , )
            MENU Set tbodcurrent Nb : %done
         }
      }
      GOSUB gump_wait generic_gump 8
      SET %posx %cposx + 35
      SET %posy %cposy + 554
      CLICK  %posx %posy l
      WAIT %SMALLWAIT
  }
return

;=============================================================================
; FILLBOD
; Remplis le BOD
;=============================================================================
sub fillBOD
    if %FILLBOD = -1
    {
       MENU Set tlog Remplissage du BOD
       SET %BODID %1
       SET #lobjectid %BODID
    	 EVENT macro 17 1
    	 GOSUB gump_wait generic_gump
    	 SET %posx #CONTPOSX + 137
    	 SET %posy #CONTPOSY + 203
       CLICK %posx %posy l
       WAIT %SMALLWAIT
       SET %RETRY 0
       WHILE %RETRY < %FILLBOD_RETRIES
       {
          If #MenuButton = Closed
             HALT
          FINDITEM * C_ , #BACKPACKID
          For #FINDINDEX 1 #FINDCNT
      		{
              If #MenuButton = Closed
                 HALT
              SET %itemid #FINDID
              EVENT property %itemid
              If Durability in #PROPERTY || Crafted in #PROPERTY
              {
                  if #TARGCURS <> 1
                  {
                       SET #lobjectid %BODID
                		   EVENT macro 17 1
                		   GOSUB gump_wait generic_gump
                		   SET %posx #CONTPOSX + 137
                		   SET %posy #CONTPOSY + 203
                       CLICK %posx %posy l
                       WAIT %WAIT
                  }
                  WAIT %SMALLWAIT
                  SET #ltargetid %itemid
                  EVENT macro 22 1
                  WAIT %WAIT
              }
          }
          SET %RETRY %RETRY + 1
      }
      GOSUB gump_wait generic_gump
  		SET %posx #CONTPOSX + 137
  		SET %posy #CONTPOSY + 225
      CLICK %posx %posy l
      WAIT %WAIT
      if #TARGCURS = 1
      {
         SET #ltargetid #BACKPACKID
         EVENT macro 22 1
         WAIT %SMALLWAIT
         GOSUB gump_wait generic_gump 5
      }
   }
return

;===========================================================
; Name: pathFind
; Author: ScriptFellow (the.WZA)
; Parameters: %1 = X
;             %2 = Y
;             %3 = Z
;             %4 = tolerance
;             %5 = timeout (in seconds)
; Purpose: Pathfind to the given coordinates
; Return: %return (#true or #false )
;-----------------------------------------------------------
sub pathFind
  set %_x %1
  set %_y %2
  if %0 <= 2 || %2 = N/A
     set %_z -1
  else
     set %_z %3
  if %0 <= 3 || %3 = N/A
     set %_tolerance 0
  else
     set %_tolerance %4
  if %0 <= 4
     set %_endTime #sCnt + 15
  else
     set %_endTime #sCnt + %5
  set %return #false
  deleteJournal
  scanJournal 2
  event PathFind %_x %_y %_z
_pathFindScanAgain:
  scanJournal 1
  if pathfinding in #journal
     goto _pathFindOkay
  if can't_get_there in #journal || #sCnt > %_endTime
     goto _pathFindEnd
  goto _pathFindScanAgain
_pathFindOkay:
  gosub _pathFindDist %_x %_y %_z #charPosX #charPosY #charPosZ
  set %return %return <= %_tolerance
  if %return
  {
     if %_tolerance > 0
     {
        set %1 #cliLeft + #cliXRes / 2
        set %2 #cliTop + #cliYRes / 2
        if #charDir < 3
            set %1 %1 + 1
        else
        {
           if #charDir > 3 && #charDir < 7
              set %1 %1 - 1
        }
        if #charDir = 0 || #charDir = 6
           set %2 %2 - 1
        else
        {
           if #charDir > 1 && #charDir < 5
              set %2 %2 + 1
        }
        click %1 %2 R
     }
     goto _pathFindEnd
  }
  if #sCnt > %_endTime
     goto _pathFindEnd
  goto _pathFindOkay
_pathFindEnd:
return

sub _pathFindDist
  set %1 %1 - %4 abs
  set %2 %2 - %5 abs
  set %3 %3 - %6 abs
  gosub max %1 %2 %3
return

; to be defined
sub max
  set %return %1
  for %_idx 2 %0
  {
     if % . %_idx > %return
     set %return % . %_idx
  }
return

;=============================================================================
; MAKEBOD
; Fais tous les BOD connus
;=============================================================================
sub makeBOD
  MENU Set tlog Selectionnez le coffre contenant les BOD vierges
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %BODFROM #LTARGETID
  WAIT %SMALLWAIT
  MENU Set tlog Selectionnez le coffre ou deposer les BOD finis
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %BODTO #LTARGETID
  WAIT %SMALLWAIT
  MENU Set tlog Selectionnez le coffre ou deposer les BOD inconnus
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %BODUNKNOWN #LTARGETID
  WAIT %SMALLWAIT
  MENU Set tlog Ouverture du coffre de BOD
  SET #lobjectid %BODFROM
	EVENT macro 17 0
	WAIT %SMALLWAIT
  SET %nb 0
  WHILE %nb < %FINDBOD_RETRIES
  {
      If #MenuButton = Closed
         HALT
      FINDITEM %BODTYPES C_ , %BODFROM
      if #FINDCNT > 0
      {
          EVENT property #findid
          GOSUB getBODType #property
          SET %VARNAME %PREFIX , #RESULT
          SET %FULLVARNAME BOD_ , %VARNAME
          MENU Set tbodcode BOD : %FULLVARNAME
          MENU Set tbodamount Total : N/A
          MENU Set tbodcurrent Nb : 0
          STR Len *BOD_ . %VARNAME
          STR Mid *BOD_ . %VARNAME 1 1
          SET %p #STRRES
          SET %large Large , #SPC , Bulk
          If %large in #property || %p <> _ || ( Exceptional in #property && %EXCEPT = #FALSE )
          {
              If Exceptional in #property && %EXCEPT = #FALSE
                  MENU Set tlog %FULLVARNAME est exceptionnel
              Else
                  MENU Set tlog %FULLVARNAME est inconnu
              GOSUB transfert #findid %BODFROM %BODUNKNOWN
              SET %FAILEDBOD %FAILEDBOD + 1
              MENU Set tfailed BOD inconnus : %FAILEDBOD
          }
          else
          {
              MENU Set tlog %FULLVARNAME est connu
              SET %BODID #findid
              GOSUB transfert %BODID %BODFROM #BACKPACKID
              GOSUB createItems *BOD_ . %VARNAME #property
              GOSUB fillBOD %BODID
              GOSUB transfert %BODID #BACKPACKID %BODTO
              SET %FILLEDBOD %FILLEDBOD + 1
              MENU Set tdone BOD remplis : %FILLEDBOD
          }
      }
      else
          SET %nb %nb + 1
  }
return

;=============================================================================
; NEWBOD
; Declaration d'un nouveau BOD.
;=============================================================================
sub newBOD
  SET #LTARGETID N/A
  MENU Set tlog Selectionnez le BOD
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %BODID #LTARGETID
  EVENT property %BODID
  SET %BODPROPS #property
  GOSUB getBODType %BODPROPS
  ; Creation de la variable
  SET %VARNAME %PREFIX , #RESULT
  SET %FULLVARNAME BOD_ , %VARNAME
  MENU Set tbodcode BOD : %FULLVARNAME
  MENU Set tlog Ouvrez votre outil ou focus le gump
  GOSUB gump_wait generic_gump
  If #RESULT = #TRUE
  {
    SET %cposx #CONTPOSX
    SET %cposy #CONTPOSY

    SET %seq
    REPEAT
      MENU Set tlog <x> pour enregistrer un clic <s> pour stopper
      If #MenuButton = Closed
         HALT
      onhotkey x
      {
         SET %posx #CURSORX - %cposx
         SET %posy #CURSORY - %cposy
         SET %seq %seq , _ , %posx , _ , %posy
         MENU Set tlog Clic a la position x: %posx y: %posy
         WAIT %WAIT
      }
      onhotkey s
      {
         MENU Set tlog %FULLVARNAME : %seq
         SET *BOD_ . %VARNAME %seq
         GOTO Stop
      }
      WAIT 1
    UNTIL #FALSE
  }
  else
  {
     MENU Set tlog Gump not found
  }
Stop:
return

;=============================================================================
; REWARDBOD
; Fais tous les BOD connus
;=============================================================================
sub rewardBOD
  MENU Set tlog Selectionnez le livre contenant les BOD a rendre
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %BODFROM #LTARGETID
  WAIT %SMALLWAIT
  MENU Set tlog Selectionnez le livre ou stocker les nouveaux BOD
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %BODTO #LTARGETID
  WAIT %SMALLWAIT
  MENU Set tlog Selectionnez le coffre ou deposer les rÈcompenses
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %REWARDS #LTARGETID
  WAIT %SMALLWAIT
  MENU Set tlog Selectionnez le vendeur
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %VENDOR #LTARGETID
  WAIT %SMALLWAIT
  SET %REWARD_RUN #True
  WHILE %REWARD_RUN = #True
  {
    If #MenuButton = button_reward
    {
        SET %REWARD_RUN #False
        MENU Set button_reward Rendre les BOD
        Set #MenuButton N/A
        BREAK
    }
    MENU Set tlog Ouverture du livre de BOD
    SET #lobjectid %BODFROM
  	EVENT macro 17 0
  	WAIT %SMALLWAIT
  	GOSUB gump_wait generic_gump 4
  	MENU Set tlog Recuperation d'un BOD
  	SET %posx #CONTPOSX + 43
  	SET %posy #CONTPOSY + 100
    CLICK %posx %posy l
  	GOSUB gump_wait generic_gump 4
  	MENU Set tlog Fermeture du livre
  	SET %posx #CONTPOSX + 388
  	SET %posy #CONTPOSY + 426
    CLICK %posx %posy l
    WAIT %SMALLWAIT
    finditem %VENDOR
    move #FINDX #FINDY 1
    MENU Set tlog Suivi du vendeur
    GOSUB pathFind #FINDX #FINDY #FINDZ 1 8
    finditem %BODTYPES C_ , #BACKPACKID
    If #FINDKIND <> -1
    {
      MENU Set tlog Donne le BOD au vendeur
      EXEVENT Drag #FINDID
  	  WAIT %SMALLWAIT
  	  EXEVENT Dropc %VENDOR
      WAIT %WAIT
      MENU Set tlog Ouverture du menu
      exevent Popup %VENDOR 10 10
      WAIT %SMALLWAIT
      GOSUB gump_wait normal_gump 4
      MENU Set tlog Demande de nouveau BOD
      CLICK 35 37 l
      WAIT %SMALLWAIT
      GOSUB gump_wait generic_gump 4
      If #RESULT = #False
      {
         SET %REWARD_RUN #False
         CONTINUE
      }
      MENU Set tlog Acceptation du nouveau BOD
      SET %posx #CONTPOSX + 110
    	SET %posy #CONTPOSY + #CONTSIZEY -  25
    	CLICK %posx %posy l
      SET %STOP #SYSTIME + 12000
      WAIT %WAIT
      SET %NB 0
      SET %BODFOUND #False
      WHILE %NB < 3
      {
        finditem %BODTYPES C_ , #BACKPACKID
        If #FINDKIND <> -1
        {
           SET %BODFOUND #True
           MENU Set tlog Rangement du BOD
           EXEVENT Drag #FINDID
      	   WAIT %SMALLWAIT
      	   EXEVENT Dropc %BODTO
           GOSUB gump_wait generic_gump 4
           MENU Set tlog Fermeture du livre
        	 SET %posx #CONTPOSX + 388
        	 SET %posy #CONTPOSY + 426
           CLICK %posx %posy l
           WAIT %SMALLWAIT
        }
        SET %NB %NB + 1
        WAIT %WAIT
      }
      If %BODFOUND = #False
      {
         SET %REWARD_RUN #False
         CONTINUE
      }
      GOSUB transfert %PIOCHE #BACKPACKID %REWARDS
      GOSUB transfert %PELLE #BACKPACKID %REWARDS
      GOSUB transfert %TISSU #BACKPACKID %REWARDS
      WHILE #SYSTIME < %STOP
      {
         If #MenuButton = button_reward
         {
             BREAK
         }
         SET %RESTANT ( %STOP - #SYSTIME ) / 1000
         MENU Set tlog Attente entre les BOD ( %RESTANT )
         WAIT %SMALLWAIT
      }
    }
  }
  MENU Set button_reward Rendre les BOD
return


;=============================================================================
; AGGROALL
; Aggro tous les monstre d'un type
;=============================================================================
sub aggroAll
{
    SET %AGGROTYPE %1
    FINDITEM %AGGROTYPE
  	for #FINDINDEX 1 #FINDCNT
  	{
        If #MenuButton = Closed
           HALT
    		if #findkind <> -1
    		{
           SET #ltargetid #FINDID
           EVENT macro 27 0
    		}
    		WAIT %wait
  	}
  	return
}

;=============================================================================
; SETWARMODE
; Active le war mode
;=============================================================================
SUB setWarMode
{
    if G notin #charStatus
    {
        EVENT macro 6 0
        WAIT %BIGWAIT
    }
    return
}

;=============================================================================
; UNSETWARMODE
; Active le war mode
;=============================================================================
SUB unsetWarMode
{
    if G in #charStatus
    {
        EVENT macro 6 0
        WAIT %BIGWAIT
    }
    return
}

;=============================================================================
; CHECKENNEMY
; Check if ennemy are attacking
;=============================================================================
SUB checkEnnemy
{
    SET %CURHITS #HITS
    MENU Set tlog Check ennemis
    SET %gtimeout #SCNT + 6
    WHILE #SCNT < %gtimeout
    {
        If #MenuButton = Closed
           HALT
        WAIT %WAIT
    }
    If #HITS <> %CURHITS
       return #True
    return #False
}

;=============================================================================
; KILLALL
; Active le war mode
;=============================================================================
SUB killAll
{
    EVENT Macro 15 	115 ;Cast Wither
    SET %gtimeout #SCNT + 3
    WHILE #SCNT < %gtimeout
        WAIT %WAIT
    EVENT Macro 15 	115 ;Cast Wither
    SET %gtimeout #SCNT + 3
    WHILE #SCNT < %gtimeout
        WAIT %WAIT
    EVENT Macro 15 	115 ;Cast Wither
    SET %gtimeout #SCNT + 3
    WHILE #SCNT < %gtimeout
        WAIT %WAIT
    WHILE #TRUE
    {
        If #MenuButton = Closed
           HALT
        GOSUB checkEnnemy
        If #RESULT = #TRUE
        {
            MENU Set tlog Ennemis trouve, attaque en cours
            EVENT Macro 15 	115 ;Cast Wither
            SET %gtimeout #SCNT + 3
            WHILE #SCNT < %gtimeout
                WAIT %WAIT
            EVENT Macro 15 	115 ;Cast Wither
            SET %gtimeout #SCNT + 3
            WHILE #SCNT < %gtimeout
                WAIT %WAIT
            EVENT Macro 15 	115 ;Cast Wither
            SET %gtimeout #SCNT + 3
            WHILE #SCNT < %gtimeout
                WAIT %WAIT
        }
        else
            BREAK
    }
    return
}

;=============================================================================
; DOLOOT
; Lance le loot
;=============================================================================
sub doLoot
{
    SET %merkcorpse N/A
    SET %DONE #False
    WHILE #True
    {
        If #MenuButton = Closed
           HALT
        findItem %corpse G
        if #findkind = -1
           BREAK
        if #findkind = 1
        {
            if  #findid <> %merkcorpse
            {
                event exmsg #findid 3 30 Loot me!
                set %merkcorpse #findid
                GOSUB looten
            }
        }
    }
    return
}

sub looten
{
;search corpse
NAE1:
   findItem %corpse G
   if #findkind <> 1
	    return
   if #FINDREP = 110
   {
      ignoreitem #findid
      goto NAE1
   }
   set %foundcorpse #findid
   set %merkcorpse #findid
   set %merkzeit #scnt + %pathzeit
   set %merkzeit2 0
PATHW1:
   if #scnt > %merkzeit
   {
        MENU Set tlog Impossible d'aller jusqu'au corps
        return
   }
   findItem %foundcorpse G
   if #FINDDIST <= 2
      goto NAE3
   MENU Set tlog Va jusqu'au corps
   if #scnt <= %merkzeit2
      goto PATHW1
   event pathfind #FINDX #FINDY #FINDZ 2 2s
   set %merkzeit2 #scnt + 2
   goto PATHW1
NAE3:
   ;---cut corpse
   set #lobjectid %myweapon
   set #ltargetkind 1
   set #ltargetid %foundcorpse
   event macro 17 0
   target 2s
   event macro 22 0
   wait %mydelay
   ;----open corpse
   MENU Set tlog Open Corpse
   gosub openLootContainerAt %foundcorpse 40 40
   if %return = #false
      return
   wait %mydelay
   set %corpsebag %_lootcontainer
AX04:
   ;---get the gold (or whatever else in %gold
   MENU Set tlog Get Loot
   findItem %gold C_ , %corpsebag
   if #findkind <> 0
   {
     goto AX7
   }
   set %merk #findid
   deleteJournal
   gosub MoveItemToBackpack %merk 0
   wait %mydelay
   scanjournal 1
   if OVERLOADED in #Journal || HOLD_MORE in #Journal
   {
      click 100 100 r
      MENU Set tlog Sac plein
      GOSUB unmount
      WAIT %SMALLWAIT
      GOSUB transfert %CUIR #BACKPACKID %SACBEETLE
      GOSUB transfert %LAINE #BACKPACKID %SACBEETLE
      GOSUB transfert %PLUME #BACKPACKID %SACBEETLE
      GOSUB mount
      WAIT %SMALLWAIT
   }
   goto AX04
AX7:
   ;---get the leather
   findItem %leather_uncutted C_ , %corpsebag
   if #findkind <> 0
      goto AX8
   set %merk #findid
   deleteJournal
   gosub MoveItemToBackpack %merk 0
   wait %mydelay
   scanjournal 1
   if OVERLOADED in #Journal || HOLD_MORE in #Journal
   {
      click 100 100 r
      MENU Set tlog Sac plein
      GOSUB unmount
      WAIT %SMALLWAIT
      GOSUB transfert %CUIR #BACKPACKID %SACBEETLE
      GOSUB transfert %LAINE #BACKPACKID %SACBEETLE
      GOSUB transfert %PLUME #BACKPACKID %SACBEETLE
      GOSUB mount
      WAIT %SMALLWAIT
   }
   goto AX7
   ;---cut the leather
   ;---cut the leather debug start
AX8:
   gosub close_container
   ;click 100 100 r
   MENU Set tlog Cut Hides
   finditem %scissors C_ , #backpackid
   set #lobjectid #findid
   findItem %leather_uncutted C_ , #backpackid
   if #findkind = 0
   {
      set #lTargetKind 1
      set #ltargetid #findid
      event macro 17 0
      target 2s
      event macro 22 0
      wait %mydelay
   }
   ignoreitem %foundcorpse
   return
}

;################################
;  Container closing
; %1 = container id
;################################
sub close_container
{
CLOSEAGAIN:
   if #conttype <> YFM
      return
   set %clx #contposx + 50
   set %cly #contposy + 80
   click %clx %cly r
   goto CLOSEAGAIN
}
;################################
;  Container opening (Lootcontainer)
;################################
; Name: OpenLootContainerAt
; Purpose: Opens a Loot container at x y (needed after pub 28)
; %1 = container id before open
; %2 = X
; %3 = Y
;returns %_lootcontainer
sub openLootContainerAt
{
	set %4b #sCnt2 + 20
                set %_contid %1
	set %_x %2
	set %_y %3
	set %_retry 0
_openContainerAtRetry:
                set %_oldcontainer #contid
                set #nextCPosX %_x
	set #nextCPosY %_y
	findItem %_contid
	set #lObjectID #findID
	event Macro 17 0
                gosub waitForLootContainerToOpen
                if %return = #false
                {
	      if #scnt2 > %4b
                      {
                         set %return #false
         	         return
                      }
                      goto _openContainerAtRetry:
                }
                set %_lootcontainer #contid
                wait %backpackdelay
	if #contPosX <> %_x && #contPosY <> %_y
	{
		set #contPosX %_x
		set #contPosY %_y
		wait %backpackdelay
	}
                set %return #true
                return
}

sub waitForLootContainerToOpen
{
   set %4 #sCnt2 + 30
   waitcheck31:
     if #scnt2 > %4
    {
         set %return #false
         return
    }
     if  #contid = %_oldcontainer
          goto waitcheck31
     if #contname <> container_gump || #contsize <> 144_212
           goto waitcheck31
      set %return #true
      return
}

;#################################
; gosub MoveItemToBackpack  %itemid %amount
; Purpose: Moves an item to the backpack
;#################################

sub MoveItemToBackpack
 {
   set #FINDMOD 0_0
   gosub drag %1 %2
   gosub dropOnBackPack #backpackid
   return
}

;##########################
;# gosub drag %itemid %amount
;# returns %return #false or #true
;###########################
sub drag
{
	set %_itemID %1
	if %0 < 2 || ! ( %2 > 0 )
	   set %_amount
	else
	   set %_amount %2
	gosub waitForNoDragging
                if %return = #false
	     return
	   msg $ ; clean keyboard buffer
	   event Drag %_itemID
     SET %NB 0
_drag:
                  gosub WaitForDragging
                  if #contname = stack_gump
                       msg %_amount $
                  gosub waitForOnlyDragging
                  SET %NB %NB + 1
                  if %NB > 5
                     goto _dragend
                  if #contname = stack_gump
                     goto _drag
                ;wait %dragdelay   ;needed?
_dragend:
                return
}


;##########################
;# gosub drop %screenx %screeny
;# returns %return #false or #true
;###########################
sub drop
{
	set %return #false
	if #contname != drag_gump
                      return
	click %1 %2 P
	gosub waitForNoDragging
	wait %dropdelay
               return
}

sub dropOnBackPack
{
	set %_findMod #findMod
	set #findMod 0_0
	findItem #backpackid
	set %_paperdollX #findX
	set %_paperdollY #findY
	set #findMod %_findMod
	set %_backpackX %_paperdollX + 142
	set %_backpackY %_paperdollY + 225
	gosub drop %_backpackX %_backpackY %_retVal
                return
}


sub WaitForDragging
{
    LinesPerCycle %uncriticallinesPerCycle
   set %return #true
   set %4 #sCnt2 + 100
   waitcheck71:
     if #scnt2 > %4
    {
         set %return #false
         LinesPerCycle %mylinesPerCycle
         return
    }
     if  #contname = drag_gump
    {
         LinesPerCycle %mylinesPerCycle
         return
    }
     if  #contname = stack_gump
     {
         LinesPerCycle %mylinesPerCycle
         return
     }
     goto waitcheck71
}


sub waitForOnlyDragging
{
   LinesPerCycle %uncriticallinesPerCycle
   set %return #true
   set %4 #sCnt2 + 30
   waitcheck77:
     if #scnt2 > %4
    {
         set %return #false
         LinesPerCycle %mylinesPerCycle
         return
    }
     if  #contname = drag_gump
     {
         LinesPerCycle %mylinesPerCycle
         return
     }
     goto waitcheck77
      return
}


sub waitForNoDragging
{
   LinesPerCycle %uncriticallinesPerCycle
   set %4 #sCnt2 + 40
   waitcheck42:
     if #scnt2 > %4
    {
         set %return #false
         LinesPerCycle %mylinesPerCycle
         return
    }
     if  #contname = drag_gump
          goto waitcheck42
     if  #contname = stack_gump
          goto waitcheck42
    set %return #true
    LinesPerCycle %mylinesPerCycle
    return
}

;=============================================================================
; UNMOUNT
; Descend de la beetle
;=============================================================================
sub unmount
  GOSUB unsetWarMode
	SET #lobjectid #CHARID
	EVENT macro 17 0
	WAIT 1s
return

;=============================================================================
; MOUNT
; Monte sur la beetle
;=============================================================================
sub mount
	MSG %allcome
	WAIT 2s
	SET #lobjectid %pet
	EVENT macro 17 0
	WAIT 1s
return

;=============================================================================
; LOOTRESSOURCES
; Recupere les ressources cuire / plumes / laine
;=============================================================================
sub lootRessources
{
    IGNOREITEM reset
    GOSUB unmount
    MENU Set tlog Selectionnez le coffre a cuire
    SET #TARGCURS 1
    WHILE #TARGCURS = 1
    	WAIT 1
    SET %SECURE #LTARGETID
    WAIT %SMALLWAIT
    ;FINDITEM %SECURE
    ;DISPLAY #FINDTYPE
    MENU Set tlog Selectionnez le runebook
    SET #TARGCURS 1
    WHILE #TARGCURS = 1
    	WAIT 1
    SET %RUNEBOOK #LTARGETID
    WAIT %SMALLWAIT
    MENU Set tlog Selectionnez la beetle
    SET #TARGCURS 1
    WHILE #TARGCURS = 1
    	WAIT 1
    SET %pet #LTARGETID
    WAIT %SMALLWAIT
    MENU Set tlog Ouvrir le sac de la beetle (6s)
		WAIT 6s
		SET %SACBEETLE #CONTID
    WAIT %SMALLWAIT
    GOSUB mount
    WAIT %SMALLWAIT
    SET %spot 1
    WHILE #True
    {
        MENU Set tlog Va au spot %spot
        GOSUB recall %spot
        If %spot = 1
        {
            GOSUB unmount
            WAIT %SMALLWAIT
            GOSUB transfert %CUIR %SACBEETLE %SECURE
            GOSUB transfert %LAINE %SACBEETLE %SECURE
            GOSUB transfert %PLUME %SACBEETLE %SECURE
            GOSUB mount
            WAIT %SMALLWAIT
        }
        Else
        {
            MENU Set tlog Activation du War Mode
            GOSUB setWarMode
            MENU Set tlog Aggro tous les animaux
            GOSUB aggroAll %COW
            GOSUB aggroAll %BULL
            GOSUB aggroAll %BULL2
            GOSUB aggroAll %COW2
            GOSUB aggroAll %MOUTON
            GOSUB aggroAll %CHEVAL
            GOSUB aggroAll %CHEVAL2
            GOSUB aggroAll %CHEVAL3
            GOSUB aggroAll %POULE
            MENU Set tlog Tue les animaux
            GOSUB killAll
            MENU Set tlog Ramassage des ressources
            GOSUB doLoot
            GOSUB killAll
            MENU Set tlog Ramassage des ressources
            GOSUB doLoot
        }
        If %spot = 10
           SET %spot 1
        Else
           SET %spot %spot + 1
        GOSUB unmount
        WAIT %SMALLWAIT
        GOSUB transfert %CUIR #BACKPACKID %SACBEETLE
        GOSUB transfert %LAINE #BACKPACKID %SACBEETLE
        GOSUB transfert %PLUME #BACKPACKID %SACBEETLE
        GOSUB mount
        WAIT %SMALLWAIT
    }
    return
}

;=============================================================================
; INIT
; Initialise les variabls globales en fonction du menu
;=============================================================================
sub init
    MENU Set tlog Initialisation...
    MENU Get mode
    SET %CURRENT_MODE #menures
    MENU Set tmode Mode : #menures
    MENU Get create
    SET %CREATEITEM #menures
    MENU Get fill
    SET %FILLBOD #menures
    MENU Get except
    SET %EXCEPT #menures
    MENU Get getcuir
    SET %GETCUIR #menures
    MENU Get getlaine
    SET %GETLAINE #menures
    MENU Get getplume
    SET %GETPLUME #menures
    If %CURRENT_MODE = 1
    {
       SET %CURRENT_TOOL %BS_TOOLS
       SET %CURRENT_MATERIALS %BS_MATERIALS
       SET %PREFIX F_
    }
    If %CURRENT_MODE = 2
    {
       SET %CURRENT_TOOL %TL_TOOLS
       SET %CURRENT_MATERIALS %TL_MATERIALS
       SET %PREFIX T_
    }
    If %CURRENT_MODE = 3
    {
       SET %CURRENT_TOOL %TL_TOOLS
       SET %CURRENT_MATERIALS %TL_LEATHER
       SET %PREFIX C_
    }
    finditem %weapons C_ , #BACKPACKID
    if #findkind <> -1
    {
       set %myweapon #findid
    }
return

;=============================================================================
; BOUCLE DE MENU
;=============================================================================
Set #MenuButton N/A
MenuLoop:
   MENU Set tlog #SPC
   If #MenuButton <> N/A
   {
      If #MenuButton = button_new
      {
         GOSUB init
         GOSUB newBOD
         Set #MenuButton N/A
      }
      If #MenuButton = button_make
      {
         GOSUB init
         GOSUB makeBOD
         Set #MenuButton N/A
      }
      If #MenuButton = button_reward
      {
         MENU Set button_reward Rendre les BOD (Stop)
         Set #MenuButton N/A
         GOSUB init
         GOSUB rewardBOD
      }
      If #MenuButton = button_loot
      {
         Set #MenuButton N/A
         GOSUB init
         GOSUB lootRessources
      }
      If #MenuButton = Closed
      {
         HALT
      }
   }
Goto MenuLoop
