;=============================================================================
; DECLARATIONS CONSTANTES
;=============================================================================
SET %SMALLWAIT 8
SET %WAIT 12
SET %BS_TOOLS TBG
SET %TL_TOOLS HAG
SET %BS_MATERIALS ENK
SET %TL_MATERIALS CUI
SET %TL_LEATHER JJG
SET %MATERIALS_QTY 400
SET %BODTYPES EYM
SET %PELLE TWF
SET %PIOCHE QPF
SET %TISSU BUI
SET %FINDBOD_RETRIES 4
SET %FILLBOD_RETRIES 2
SET %FILLEDBOD 0
SET %FAILEDBOD 0

;=============================================================================
; DECLARATIONS GLOBALES
;=============================================================================
SET %CURRRENT_MODE N/A
SET %EXCEPT N/A
SET %CREATEITEM N/A
SET %FILLBOD N/A
SET %CURRENT_TOOL N/A
SET %CURRENT_MATERIALS N/A
SET %PREFIX N/A
SET %REWARD_RUN N/A

;=============================================================================
; DECLARATIONS MENU
;=============================================================================
MENU window title AutoBOD 3.0
MENU window size 350 245
MENU window color $EEEEEE
MENU Button button_new 10 50 150 25 Nouveau BOD
MENU Button button_make 10 85 150 25 Faire les BOD
MENU Button button_reward 10 120 150 25 Rendre les BOD
MENU Combo Create mode 10 15 150
MENU Combo Add mode Forgeo
MENU Combo Add mode Tailo (Tissu)
MENU Combo Add mode Tailo (Cuir)
MENU Combo Select mode 1
MENU Check create 10 155 150 20 #true Creer les items
MENU Check fill 10 175 150 20 #true Remplir les BOD
MENU Check except 10 195 150 20 #false Faire les BOD except
MENU Text tmode 170 15 Mode : N/A
MENU Text tbodcode 170 30 BOD : N/A
MENU Text tbodamount 170 45 Total : N/A
MENU Text tbodcurrent 170 60 Nb : 0
MENU Text tdone 170 85 BOD remplis : 0
MENU Text tfailed 170 100 BOD inconnus : 0
MENU Font Align center
menu Font Color $00009C
menu Font Style b
MENU Text tlog 10 225 #SPC
MENU show

;=============================================================================
; REPLACE
; Remplace une string par une autre dans une string donnÈe
; Param 1 : haystack
; Param 2 : from
; Param 3 : to
;=============================================================================
SUB replace
  SET %lpc #LPC
  linesPerCycle 500
  SET %st 1
  SET %str %1
  STR LEN %2
  SET %findlen #STRRES
  STR LEN %3
  SET %replen #STRRES
  STR LEN %str
  SET %len #STRRES
clean:
  FOR %i %st %len
  {
    STR MID %str %i %findlen
    SET %find #STRRES
    IF %find = %2
    {
      STR DEL %str %i %findlen
      SET %str #STRRES
      IF %3 <> _BLANK_
      {
        STR INS %str %3 %i
        SET %str #STRRES
        SET %st %st + %findlen
        STR LEN %str
        SET %len #STRRES
        GOTO clean
      }
      else
      {
        STR LEN %str
        SET %len #STRRES
        SET %st %i
        GOTO clean
      }
    }
    else
    {
      SET %st %st + 1
    }
  }
linesPerCycle %lpc
RETURN %str

;=============================================================================
; GUMP_WAIT
; Attend l'apparition d'un gump
; param 1 : Gump
; param 2 : Timeout
; param 3 : Mode
;=============================================================================
sub gump_wait
	if %0 > 0
		SET %gump %1
  if %0 > 1
  {
		SET %gtimeout #SCNT + %2
		SET %mode FAIL
  }
  SET %found #FALSE
  SET %gump_wait #TRUE
	WHILE %gump_wait <> #FALSE
	{
    If #MenuButton = Closed
       HALT
		if #contname <> %gump
		{
       SET %found #FALSE
		}
		else
		{
		   SET %found #TRUE
		}
		if %found = #FALSE
		{
       If #scnt > %gtimeout && %mode = FAIL
		   {
		      SET %gump_wait #FALSE
		   }
		}
		else
		{
       SET %gump_wait #FALSE
    }
	}
return %found

;=============================================================================
; TRANSFERT
; Transfert items d'un sac √† un autre
; param 1 : Type des objets √† transf√©rer
; param 2 : Sac de d√©part
; param 3 : Sac d'arriv√©e
; param 4 : Stack size
;=============================================================================
sub transfert
	SET %typeobj %1
	SET %from %2
	SET %to %3
	SET #lobjectid %from
	EVENT macro 17 1
	WAIT %wait
	if %0 = 4
		%size = %4
	else
		%size = 0
	SET %nb 0
	FINDITEM %typeobj C_ , %from
	for #FINDINDEX 1 #FINDCNT
	{
    If #MenuButton = Closed
       HALT
		if #findkind <> -1
		{
			if %size > 0
				EXEVENT drag #findid %size
			else
				EXEVENT drag #findid #findstack
			WAIT %smallwait
			EXEVENT dropc %to
			WAIT %wait
			if #result = #TRUE
				break
		}
		else
			break
		WAIT %wait
	}
	WAIT %smallwait
return

;=============================================================================
; GETBODTYPE
; Creer un code pour le BOD
;=============================================================================
sub getBODType
  SET !line %1
  if Exceptional in !line
     SET %numline 6
  else
     SET %numline 5
  STR pos !line $ %numline
  SET %spos #STRRES
  STR del !line 1 %spos
  SET !line #STRRES
  STR pos !line : 1
  SET %epos #STRRES - 1
  STR mid !line 1 %epos
  GOSUB replace #STRRES #SPC _
  GOSUB replace #RESULT ' _
  GOSUB replace #RESULT - _
return #RESULT

;=============================================================================
; GETBODAMOUNT
; Creer un code pour le BOD
;=============================================================================
sub getBODAmount
  SET !line %1
  if Exceptional in !line
     SET %numline 6
  else
     SET %numline 5
  STR pos !line $ %numline
  SET %spos #STRRES - 2
  SET %epos 2
  STR mid !line %spos %epos
return #STRRES

;=============================================================================
; GETNEXTPOS
; Donne le prochian couple _X_Y dans le gump
;=============================================================================
sub getNextPos
   SET %res X
   SET %seq %1
   STR Pos %seq _ 3
   if #STRRES > 0
   {
      SET %len #STRRES - 1
      STR del %seq 1 %len
      SET %res #STRRES
   }
return #STRRES

;=============================================================================
; GETX
; Donne la position X
;=============================================================================
sub getX
   SET %seq %1
   STR Pos %seq _ 2
   SET %start 2
   SET %end #STRRES - %start
   STR Mid %seq %start %end
return #STRRES

;=============================================================================
; GETY
; Donne la position Y
;=============================================================================
sub getY
   SET %seq %1
   STR Pos %seq _ 2
   SET %start #STRRES + 1
   STR Pos %seq _ 3
   if #STRRES = 0
   {
       SET %pos %start - 1
       STR Del %seq 1 %pos
   }
   else
   {
       SET %end #STRRES - %start
       STR Mid %seq %start %end
   }
return #STRRES

;=============================================================================
; CHECKMATERIALS
; Verifie la quantitÈ de materieux restants
;=============================================================================
sub checkMaterials
   FINDITEM %CURRENT_MATERIALS C_ , #BACKPACKID
   if #findkind = -1 || #FINDSTACK < 100
	 {
	    GOSUB transfert %CURRENT_MATERIALS #BACKPACKID %BODFROM
      FINDITEM %CURRENT_MATERIALS C_ , %BODFROM
      if #findkind <> -1
  		{
    	    EXEVENT Drag #FINDID %MATERIALS_QTY
    		  WAIT %SMALLWAIT
    		  EXEVENT Dropc #BACKPACKID
          WAIT %SMALLWAIT
      }
	 }
return

;=============================================================================
; CREATEITEMS
; Creer un code pour le BOD
;=============================================================================
sub createItems
   if %CREATEITEM = -1
   {
      SET %props %2
      if 10 in %props
         SET %count 10
      if 15 in %props
         SET %count 15
      if 20 in %props
         SET %count 20
      MENU Set tbodamount Total : %count
      MENU Set tlog Creating %count items
      SET %total %count
      MENU Set tlog Creation des items
      WHILE %count <> 0
      {

         If #MenuButton = Closed
            HALT
         SET %seq %1
         GOSUB checkMaterials
         GOSUB gump_wait generic_gump 2
         If #RESULT = #FALSE
         {
             MENU Set tlog Cherche outils dans le backpack
             FINDITEM %CURRENT_TOOL C_ , #BACKPACKID
             if #FINDKIND <> -1
             {
                 SET #lobjectid #findid
  		           EVENT macro 17 0
        		     GOSUB gump_wait generic_gump
             }
             else
             {
                 MENU Set tlog ERROR : Plus d'outils
                 HALT
             }
         }
         GOSUB gump_wait generic_gump 2
         If #RESULT = #TRUE
         {
            SET %cposx #CONTPOSX
            SET %cposy #CONTPOSY
            STR Len %seq
            WHILE #STRRES > 1
            {
               If #MenuButton = Closed
                  HALT
               GOSUB getX %seq
               SET %posx #RESULT + %cposx
               GOSUB getY %seq
               SET %posy #RESULT + %cposy
            	 CLICK %posx %posy l
      	       GOSUB gump_wait generic_gump 8
             	 GOSUB getNextPos %seq
           		 SET %seq #RESULT
               STR Len %seq
               WAIT %SMALLWAIT
            }

            SET %count %count - 1
            SET %done %total - %count
            MENU Set tlog Creation des items ( , %done , #SPC , / , #SPC , %total , )
            MENU Set tbodcurrent Nb : %done
         }
      }
      GOSUB gump_wait generic_gump 8
      SET %posx %cposx + 35
      SET %posy %cposy + 554
      CLICK  %posx %posy l
      WAIT %SMALLWAIT
  }
return

;=============================================================================
; FILLBOD
; Remplis le BOD
;=============================================================================
sub fillBOD
    if %FILLBOD = -1
    {
       MENU Set tlog Remplissage du BOD
       SET %BODID %1
       SET #lobjectid %BODID
    	 EVENT macro 17 1
    	 GOSUB gump_wait generic_gump
    	 SET %posx #CONTPOSX + 137
    	 SET %posy #CONTPOSY + 203
       CLICK %posx %posy l
       WAIT %SMALLWAIT
       SET %RETRY 0
       WHILE %RETRY < %FILLBOD_RETRIES
       {
          If #MenuButton = Closed
             HALT
          FINDITEM * C_ , #BACKPACKID
          For #FINDINDEX 1 #FINDCNT
      		{
              If #MenuButton = Closed
                 HALT
              SET %itemid #FINDID
              EVENT property %itemid
              If Durability in #PROPERTY || Crafted in #PROPERTY
              {
                  if #TARGCURS <> 1
                  {
                       SET #lobjectid %BODID
                		   EVENT macro 17 1
                		   GOSUB gump_wait generic_gump
                		   SET %posx #CONTPOSX + 137
                		   SET %posy #CONTPOSY + 203
                       CLICK %posx %posy l
                       WAIT %WAIT
                  }
                  WAIT %SMALLWAIT
                  SET #ltargetid %itemid
                  EVENT macro 22 1
                  WAIT %WAIT
              }
          }
          SET %RETRY %RETRY + 1
      }
      GOSUB gump_wait generic_gump
  		SET %posx #CONTPOSX + 137
  		SET %posy #CONTPOSY + 225
      CLICK %posx %posy l
      WAIT %WAIT
      if #TARGCURS = 1
      {
         SET #ltargetid #BACKPACKID
         EVENT macro 22 1
         WAIT %SMALLWAIT
         GOSUB gump_wait generic_gump 5
      }
   }
return

;===========================================================
; Name: pathFind
; Author: ScriptFellow (the.WZA)
; Parameters: %1 = X
;             %2 = Y
;             %3 = Z
;             %4 = tolerance
;             %5 = timeout (in seconds)
; Purpose: Pathfind to the given coordinates
; Return: %return (#true or #false )
;-----------------------------------------------------------
sub pathFind
  set %_x %1
  set %_y %2
  if %0 <= 2 || %2 = N/A
     set %_z -1
  else
     set %_z %3
  if %0 <= 3 || %3 = N/A
     set %_tolerance 0
  else
     set %_tolerance %4
  if %0 <= 4
     set %_endTime #sCnt + 15
  else
     set %_endTime #sCnt + %5
  set %return #false
  deleteJournal
  scanJournal 2
  event PathFind %_x %_y %_z
_pathFindScanAgain:
  scanJournal 1
  if pathfinding in #journal
     goto _pathFindOkay
  if can't_get_there in #journal || #sCnt > %_endTime
     goto _pathFindEnd
  goto _pathFindScanAgain
_pathFindOkay:
  gosub _pathFindDist %_x %_y %_z #charPosX #charPosY #charPosZ
  set %return %return <= %_tolerance
  if %return
  {
     if %_tolerance > 0
     {
        set %1 #cliLeft + #cliXRes / 2
        set %2 #cliTop + #cliYRes / 2
        if #charDir < 3
            set %1 %1 + 1
        else
        {
           if #charDir > 3 && #charDir < 7
              set %1 %1 - 1
        }
        if #charDir = 0 || #charDir = 6
           set %2 %2 - 1
        else
        {
           if #charDir > 1 && #charDir < 5
              set %2 %2 + 1
        }
        click %1 %2 R
     }
     goto _pathFindEnd
  }
  if #sCnt > %_endTime
     goto _pathFindEnd
  goto _pathFindOkay
_pathFindEnd:
return

sub _pathFindDist
  set %1 %1 - %4 abs
  set %2 %2 - %5 abs
  set %3 %3 - %6 abs
  gosub max %1 %2 %3
return

; to be defined
sub max
  set %return %1
  for %_idx 2 %0
  {
     if % . %_idx > %return
     set %return % . %_idx
  }
return

;=============================================================================
; MAKEBOD
; Fais tous les BOD connus
;=============================================================================
sub makeBOD
  MENU Set tlog Selectionnez le coffre contenant les BOD vierges
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %BODFROM #LTARGETID
  WAIT %SMALLWAIT
  MENU Set tlog Selectionnez le coffre ou deposer les BOD finis
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %BODTO #LTARGETID
  WAIT %SMALLWAIT
  MENU Set tlog Selectionnez le coffre ou deposer les BOD inconnus
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %BODUNKNOWN #LTARGETID
  WAIT %SMALLWAIT
  MENU Set tlog Ouverture du coffre de BOD
  SET #lobjectid %BODFROM
	EVENT macro 17 0
	WAIT %SMALLWAIT
  SET %nb 0
  WHILE %nb < %FINDBOD_RETRIES
  {
      If #MenuButton = Closed
         HALT
      FINDITEM %BODTYPES C_ , %BODFROM
      if #FINDCNT > 0
      {
          EVENT property #findid
          GOSUB getBODType #property
          SET %VARNAME %PREFIX , #RESULT
          SET %FULLVARNAME BOD_ , %VARNAME
          MENU Set tbodcode BOD : %FULLVARNAME
          MENU Set tbodamount Total : N/A
          MENU Set tbodcurrent Nb : 0
          STR Len *BOD_ . %VARNAME
          STR Mid *BOD_ . %VARNAME 1 1
          SET %p #STRRES
          SET %large Large , #SPC , Bulk
          If %large in #property || %p <> _ || ( Exceptional in #property && %EXCEPT = #FALSE )
          {
              If Exceptional in #property && %EXCEPT = #FALSE
                  MENU Set tlog %FULLVARNAME est exceptionnel
              Else
                  MENU Set tlog %FULLVARNAME est inconnu
              GOSUB transfert #findid %BODFROM %BODUNKNOWN
              SET %FAILEDBOD %FAILEDBOD + 1
              MENU Set tfailed BOD inconnus : %FAILEDBOD
          }
          else
          {
              MENU Set tlog %FULLVARNAME est connu
              SET %BODID #findid
              GOSUB transfert %BODID %BODFROM #BACKPACKID
              GOSUB createItems *BOD_ . %VARNAME #property
              GOSUB fillBOD %BODID
              GOSUB transfert %BODID #BACKPACKID %BODTO
              SET %FILLEDBOD %FILLEDBOD + 1
              MENU Set tdone BOD remplis : %FILLEDBOD
          }
      }
      else
          SET %nb %nb + 1
  }
return

;=============================================================================
; NEWBOD
; Declaration d'un nouveau BOD.
;=============================================================================
sub newBOD
  SET #LTARGETID N/A
  MENU Set tlog Selectionnez le BOD
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %BODID #LTARGETID
  EVENT property %BODID
  SET %BODPROPS #property
  GOSUB getBODType %BODPROPS
  ; Creation de la variable
  SET %VARNAME %PREFIX , #RESULT
  SET %FULLVARNAME BOD_ , %VARNAME
  MENU Set tbodcode BOD : %FULLVARNAME
  MENU Set tlog Ouvrez votre outil ou focus le gump
  GOSUB gump_wait generic_gump
  If #RESULT = #TRUE
  {
    SET %cposx #CONTPOSX
    SET %cposy #CONTPOSY

    SET %seq
    REPEAT
      MENU Set tlog <x> pour enregistrer un clic <s> pour stopper
      If #MenuButton = Closed
         HALT
      onhotkey x
      {
         SET %posx #CURSORX - %cposx
         SET %posy #CURSORY - %cposy
         SET %seq %seq , _ , %posx , _ , %posy
         MENU Set tlog Clic a la position x: %posx y: %posy
         WAIT %WAIT
      }
      onhotkey s
      {
         MENU Set tlog %FULLVARNAME : %seq
         SET *BOD_ . %VARNAME %seq
         GOTO Stop
      }
      WAIT 1
    UNTIL #FALSE
  }
  else
  {
     MENU Set tlog Gump not found
  }
Stop:
return

;=============================================================================
; REWARDBOD
; Fais tous les BOD connus
;=============================================================================
sub rewardBOD
  MENU Set tlog Selectionnez le livre contenant les BOD a rendre
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %BODFROM #LTARGETID
  WAIT %SMALLWAIT
  MENU Set tlog Selectionnez le livre ou stocker les nouveaux BOD
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %BODTO #LTARGETID
  WAIT %SMALLWAIT
  MENU Set tlog Selectionnez le coffre ou deposer les rÈcompenses
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %REWARDS #LTARGETID
  WAIT %SMALLWAIT
  MENU Set tlog Selectionnez le vendeur
  SET #TARGCURS 1
  WHILE #TARGCURS = 1
  	WAIT 1
  SET %VENDOR #LTARGETID
  WAIT %SMALLWAIT
  SET %REWARD_RUN #True
  WHILE %REWARD_RUN = #True
  {
    If #MenuButton = button_reward
    {
        SET %REWARD_RUN #False
        MENU Set button_reward Rendre les BOD
        Set #MenuButton N/A
        BREAK
    }
    MENU Set tlog Ouverture du livre de BOD
    SET #lobjectid %BODFROM
  	EVENT macro 17 0
  	WAIT %SMALLWAIT
  	GOSUB gump_wait generic_gump 4
  	MENU Set tlog Recuperation d'un BOD
  	SET %posx #CONTPOSX + 43
  	SET %posy #CONTPOSY + 100
    CLICK %posx %posy l
  	GOSUB gump_wait generic_gump 4
  	MENU Set tlog Fermeture du livre
  	SET %posx #CONTPOSX + 388
  	SET %posy #CONTPOSY + 426
    CLICK %posx %posy l
    WAIT %SMALLWAIT
    finditem %VENDOR
    move #FINDX #FINDY 1
    MENU Set tlog Suivi du vendeur
    GOSUB pathFind #FINDX #FINDY #FINDZ 1 8
    finditem %BODTYPES C_ , #BACKPACKID
    If #FINDKIND <> -1
    {
      MENU Set tlog Donne le BOD au vendeur
      EXEVENT Drag #FINDID
  	  WAIT %SMALLWAIT
  	  EXEVENT Dropc %VENDOR
      WAIT %WAIT
      MENU Set tlog Ouverture du menu
      exevent Popup %VENDOR 10 10
      WAIT %SMALLWAIT
      GOSUB gump_wait normal_gump 4
      MENU Set tlog Demande de nouveau BOD
      CLICK 35 37 l
      WAIT %SMALLWAIT
      GOSUB gump_wait generic_gump 4
      If #RESULT = #False
      {
         SET %REWARD_RUN #False
      }
      MENU Set tlog Acceptation du nouveau BOD
      SET %posx #CONTPOSX + 110
    	SET %posy #CONTPOSY + #CONTSIZEY -  25
    	CLICK %posx %posy l
      SET %STOP #SYSTIME + 12000
      WAIT %WAIT
      SET %NB 0
      WHILE %NB < 3
      {
        finditem %BODTYPES C_ , #BACKPACKID
        If #FINDKIND <> -1
        {
           MENU Set tlog Rangement du BOD
           EXEVENT Drag #FINDID
      	   WAIT %SMALLWAIT
      	   EXEVENT Dropc %BODTO
           GOSUB gump_wait generic_gump 4
           MENU Set tlog Fermeture du livre
        	 SET %posx #CONTPOSX + 388
        	 SET %posy #CONTPOSY + 426
           CLICK %posx %posy l
           WAIT %SMALLWAIT
        }
        SET %NB %NB + 1
        WAIT %WAIT
      }
      GOSUB transfert %PIOCHE #BACKPACKID %REWARDS
      GOSUB transfert %PELLE #BACKPACKID %REWARDS
      GOSUB transfert %TISSU #BACKPACKID %REWARDS
      WHILE #SYSTIME < %STOP
      {
         If #MenuButton = button_reward
         {
             BREAK
         }
         SET %RESTANT ( %STOP - #SYSTIME ) / 1000
         MENU Set tlog Attente entre les BOD ( %RESTANT )
         WAIT %SMALLWAIT
      }
    }
  }
  MENU Set button_reward Rendre les BOD
return

;=============================================================================
; INIT
; Initialise les variabls globales en fonction du menu
;=============================================================================
sub init
    MENU Set tlog Initialisation...
    MENU Get mode
    SET %CURRENT_MODE #menures
    MENU Set tmode Mode : #menures
    MENU Get create
    SET %CREATEITEM #menures
    MENU Get fill
    SET %FILLBOD #menures
    MENU Get except
    SET %EXCEPT #menures
    If %CURRENT_MODE = 1
    {
       SET %CURRENT_TOOL %BS_TOOLS
       SET %CURRENT_MATERIALS %BS_MATERIALS
       SET %PREFIX F_
    }
    If %CURRENT_MODE = 2
    {
       SET %CURRENT_TOOL %TL_TOOLS
       SET %CURRENT_MATERIALS %TL_MATERIALS
       SET %PREFIX T_
    }
    If %CURRENT_MODE = 3
    {
       SET %CURRENT_TOOL %TL_TOOLS
       SET %CURRENT_MATERIALS %TL_LEATHER
       SET %PREFIX C_
    }
return

;=============================================================================
; BOUCLE DE MENU
;=============================================================================
Set #MenuButton N/A
MenuLoop:
   If #MenuButton <> N/A
   {
      If #MenuButton = button_new
      {
         GOSUB init
         GOSUB newBOD
         Set #MenuButton N/A
      }
      If #MenuButton = button_make
      {
         GOSUB init
         GOSUB makeBOD
         Set #MenuButton N/A
      }
      If #MenuButton = button_reward
      {
         MENU Set button_reward Rendre les BOD (Stop)
         Set #MenuButton N/A
         GOSUB init
         GOSUB rewardBOD
      }
      If #MenuButton = Closed
      {
         HALT
      }
   }
Goto MenuLoop
